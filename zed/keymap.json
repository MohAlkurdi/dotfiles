// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  // {
  //   "context": "Workspace",
  //   "bindings": {
  //     "space f f": "file_finder::Toggle"
  //   }
  // },

  {
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "j k": "vim::NormalBefore"
    }
  },

  {
    "context": "Editor && vim_mode == normal && !menu",
    "bindings": {
      "space f s": "workspace::NewSearch"
    }
  },

  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in normal & visual mode

      // Preview Hunk
      "space g p": "editor::ToggleHunkDiff",

      // Toggle inlay hints
      "space t i": "editor::ToggleInlayHints",

      // NOTE: Toggle Zen mode, not fully working yet
      "space z": "workspace::ToggleCenteredLayout",

      // Open markdown preview
      "space m p": "markdown::OpenPreview",
      "space m P": "markdown::OpenPreviewToTheSide",

      // Search word under cursor
      "space s w": "pane::DeploySearch"

      // Chat with AI
      // "space a c": "assistant::ToggleFocus",
    }
  },

  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work only in normal mode

      // +LSP
      "space c a": "editor::ToggleCodeActions",
      "space c r": "editor::Rename",
      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDefinitionSplit",
      "g i": "editor::GoToImplementation",
      "g I": "editor::GoToImplementationSplit",
      "g t": "editor::GoToTypeDefinition",
      "g T": "editor::GoToTypeDefinitionSplit",
      "g r": "editor::FindAllReferences",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPrevDiagnostic",
      // Symbol search
      "space s s": "outline::Toggle",
      "space s S": "project_symbols::Toggle",
      // Diagnostic
      "space x x": "diagnostics::Deploy",

      // +Git
      // Git prev/next hunk
      "] h": "editor::GoToHunk",
      "[ h": "editor::GoToPrevHunk",

      // + Buffers
      // Switch between buffers
      "shift-h": "pane::ActivatePrevItem",
      "shift-l": "pane::ActivateNextItem",
      // Close active panel
      "space b d": "pane::CloseActiveItem",
      // Close other items
      "space c o": "pane::CloseInactiveItems",
      // Save file
      "space w": "workspace::Save",
      // File finder
      "space f f": "file_finder::Toggle"
    }
  },

  // Show project panel with current file
  {
    "context": "Workspace",
    "bindings": {
      "space e": "workspace::ToggleLeftDock"
    }
  },
  // File panel (netrw)
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "r": "project_panel::Rename",
      "d": "project_panel::Delete",
      "x": "project_panel::Cut",
      "c": "project_panel::Copy",
      "p": "project_panel::Paste"
    }
  },

  {
    "context": "Editor && vim_mode == insert &&  (showing_code_actions || showing_completions)",
    "bindings": {
      "shift-tab": "editor::ContextMenuPrev",
      "ctrl-k": "editor::ContextMenuPrev",
      "tab": "editor::ContextMenuNext",
      "ctrl-j": "editor::ContextMenuNext"
    }
  }
]
